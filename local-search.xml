<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【Python】2. 基本数据类型</title>
    <link href="/2022/06/20/Python/%E3%80%90Python%E3%80%912.%20%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2022/06/20/Python/%E3%80%90Python%E3%80%912.%20%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><h1 id="2-1-数字类型"><a href="#2-1-数字类型" class="headerlink" title="2.1 数字类型"></a>2.1 数字类型</h1><h2 id="2-1-1-数字类型的组成"><a href="#2-1-1-数字类型的组成" class="headerlink" title="2.1.1 数字类型的组成"></a>2.1.1 数字类型的组成</h2><h3 id="1-整数——不同进制的转换"><a href="#1-整数——不同进制的转换" class="headerlink" title="1 整数——不同进制的转换"></a>1 整数——不同进制的转换</h3><ul><li>默认输入十进制</li><li>二进制0b、八进制0o、十六进制0x<blockquote><p>16 &#x3D;&#x3D; 0b10000 &#x3D;&#x3D; 0o20 &#x3D;&#x3D; 0x10</p></blockquote></li><li>十进制与其他进制的转换</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-built_in">bin</span>(<span class="hljs-number">16</span>)  <span class="hljs-comment"># 转二进制</span><br>b = <span class="hljs-built_in">oct</span>(<span class="hljs-number">16</span>)  <span class="hljs-comment"># 转八进制</span><br>c = <span class="hljs-built_in">hex</span>(<span class="hljs-number">16</span>)  <span class="hljs-comment"># 转十六进制</span><br><span class="hljs-built_in">print</span>(a, b, c)<br></code></pre></td></tr></table></figure><blockquote><p>0b10000 0o20 0x10</p></blockquote><p><strong>注意：上述转换结果为字符串类型</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))<br></code></pre></td></tr></table></figure><blockquote><p>&lt;class ‘str’&gt;</p></blockquote><ul><li>其他进制转十进制</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">d = <span class="hljs-built_in">int</span>(a, <span class="hljs-number">2</span>)<br>e = <span class="hljs-built_in">int</span>(b, <span class="hljs-number">8</span>)<br>f = <span class="hljs-built_in">int</span>(c, <span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(d, e, f)<br></code></pre></td></tr></table></figure><blockquote><p>16 16 16</p></blockquote><h3 id="2-浮点数——不确定性"><a href="#2-浮点数——不确定性" class="headerlink" title="2 浮点数——不确定性"></a>2 浮点数——不确定性</h3><ul><li>不确定小数问题</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>((<span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span>) == <span class="hljs-number">0.3</span>)<br></code></pre></td></tr></table></figure><blockquote><p>False</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span>)<br></code></pre></td></tr></table></figure><blockquote><p>0.30000000000000004</p></blockquote><p><strong>计算机采用二进制小数来表示浮点数的小数部分</strong></p><ul><li>部分小数不能用二进制完全表示</li></ul><blockquote><p>二进制 0.1<br>十进制 0.5</p></blockquote><ul><li>通常情况霞不会影响计算精度</li><li>四舍五入获得精确解<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">3</span>*<span class="hljs-number">0.1</span><br><span class="hljs-built_in">print</span>(a)<br>b = <span class="hljs-built_in">round</span>(a, <span class="hljs-number">1</span>)  <span class="hljs-comment"># 第二个参数为保留小数位数</span><br><span class="hljs-built_in">print</span>(b)<br></code></pre></td></tr></table></figure><blockquote><p>0.30000000000000004<br>0.3</p></blockquote></li></ul><h3 id="3-复数——a-bj"><a href="#3-复数——a-bj" class="headerlink" title="3 复数——a+bj"></a>3 复数——a+bj</h3><ul><li>大写J或小写j均可<blockquote><p>3+4j<br>2+5J</p></blockquote></li><li>虚部系数为1时，需要显性写出<blockquote><p>2+1j</p></blockquote></li></ul><h2 id="2-1-2-数字运算操作符（a-操作符-b"><a href="#2-1-2-数字运算操作符（a-操作符-b" class="headerlink" title="2.1.2 数字运算操作符（a 操作符 b)"></a>2.1.2 数字运算操作符（a 操作符 b)</h2><ul><li>加减乘除运算 + - * &#x2F;</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>((<span class="hljs-number">1</span>+<span class="hljs-number">3</span>-<span class="hljs-number">4</span>*<span class="hljs-number">2</span>)/<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><blockquote><p>-0.8</p></blockquote><ul><li>取反 -</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(-x)<br></code></pre></td></tr></table></figure><blockquote><p>-1</p></blockquote><ul><li>乘方运算 **</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-number">2</span>**<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><blockquote><p>8</p></blockquote><ul><li>整数商 &#x2F;&#x2F; 和 模运算%</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-number">13</span> // <span class="hljs-number">5</span>)  <span class="hljs-comment"># 整数商 x/y 向下取整数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">13</span> % <span class="hljs-number">5</span>)  <span class="hljs-comment"># 模运算 余数 13=2*5+3</span><br></code></pre></td></tr></table></figure><blockquote><p>2<br>3</p></blockquote><p><strong>几点说明</strong></p><ul><li>整数与浮点数运算结果是浮点数</li><li>除法运算结果是浮点数</li></ul><h2 id="2-1-3-数学运算操作函数-function-x-…"><a href="#2-1-3-数学运算操作函数-function-x-…" class="headerlink" title="2.1.3 数学运算操作函数 function(x,…)"></a>2.1.3 数学运算操作函数 function(x,…)</h2><ul><li>求绝对值 abs()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">abs</span>(<span class="hljs-number">3</span> + <span class="hljs-number">4j</span>))  <span class="hljs-comment"># 模运算</span><br></code></pre></td></tr></table></figure><blockquote><p>5.0</p></blockquote><ul><li>幂次方 pow(x,n)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>))  <span class="hljs-comment"># pow(x, n)x的n次方 等价于x**n</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>))  <span class="hljs-comment"># 2^5%3 更快速</span><br></code></pre></td></tr></table></figure><blockquote><p>32<br>2</p></blockquote><ul><li>四舍五入 round(x,n)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">1.618</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">round</span>(a))  <span class="hljs-comment"># 默认四舍五入为整数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">round</span>(a, <span class="hljs-number">2</span>))  <span class="hljs-comment"># 参数2表示四舍五入保留2位有效小数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">round</span>(a, <span class="hljs-number">5</span>))  <span class="hljs-comment"># 位数不足，无需补齐</span><br></code></pre></td></tr></table></figure><blockquote><p>2<br>1.62<br>1.618</p></blockquote><ul><li>整数商和模运算 divmod(x,y)<br>等价于返回二元元组(x&#x2F;&#x2F;y,x%y)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">divmod</span>(<span class="hljs-number">13</span>, <span class="hljs-number">5</span>))  <span class="hljs-comment"># 较(x//y, x%y)更快，只执行了一次x/y</span><br></code></pre></td></tr></table></figure><blockquote><p>(2, 3)</p></blockquote><ul><li>序列最大&#x2F;最小值 max() min()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>))<br></code></pre></td></tr></table></figure><blockquote><p>9</p></blockquote><ul><li>求和 sum(x)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]))  <span class="hljs-comment"># sum括号内为列表</span><br></code></pre></td></tr></table></figure><blockquote><p>15</p></blockquote><ul><li>借助科学计算库 math\scipy\numpy</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><span class="hljs-built_in">print</span>(math.exp(<span class="hljs-number">1</span>))  <span class="hljs-comment"># 指数运算 e^x</span><br><span class="hljs-built_in">print</span>(math.log2(<span class="hljs-number">2</span>))  <span class="hljs-comment"># 对数运算</span><br><span class="hljs-built_in">print</span>(math.sqrt(<span class="hljs-number">4</span>))  <span class="hljs-comment"># 开平方运算 等价于 4^0.5</span><br></code></pre></td></tr></table></figure><blockquote><p>2.718281828459045<br>1.0<br>2.0</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-built_in">print</span>(np.mean(a))  <span class="hljs-comment"># 求均值</span><br><span class="hljs-built_in">print</span>(np.median(a))  <span class="hljs-comment"># 求中位数</span><br><span class="hljs-built_in">print</span>(np.std(a))  <span class="hljs-comment"># 求标准差</span><br></code></pre></td></tr></table></figure><blockquote><p>3.0<br>3.0<br>1.4142135623730951</p></blockquote><h1 id="2-2-字符串类型"><a href="#2-2-字符串类型" class="headerlink" title="2.2 字符串类型"></a>2.2 字符串类型</h1><h2 id="2-2-1-字符串的表达"><a href="#2-2-1-字符串的表达" class="headerlink" title="2.2.1 字符串的表达"></a>2.2.1 字符串的表达</h2><ul><li>用””或’’括起来的任意字符</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Python&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Python&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>Python<br>Python</p></blockquote><ul><li>字符串中有双引号或单引号的情况</li></ul><p><strong>双中有单</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I&#x27;m 18 years old&quot;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>I’m 18 years old</p></blockquote><p><strong>单中有双</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&quot;Python&quot; is good&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>“Python” is good</p></blockquote><p><strong>双中有双，单中有单</strong>——转义符 \</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\&quot;Python\&quot; is good&quot;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>“Python” is good</p></blockquote><p><strong>转义符可以用来换行继续输入</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&quot;Py\</span><br><span class="hljs-string">thon&quot;</span><br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><blockquote><p>Python</p></blockquote><h2 id="2-2-2-字符串的性质"><a href="#2-2-2-字符串的性质" class="headerlink" title="2.2.2 字符串的性质"></a>2.2.2 字符串的性质</h2><h3 id="1-字符串的索引"><a href="#1-字符串的索引" class="headerlink" title="1 字符串的索引"></a>1 字符串的索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;My name is Peppa Pig&quot;</span><br></code></pre></td></tr></table></figure><p><strong>变量名[位置编号]</strong></p><ul><li>正向索引——从零开始递增</li><li>位置编号不能超过字符串的长度</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(s[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(s[<span class="hljs-number">2</span>])<br><span class="hljs-built_in">print</span>(s[<span class="hljs-number">5</span>])<br></code></pre></td></tr></table></figure><blockquote><p>M<br> <br>m</p></blockquote><ul><li>反向索引——从-1开始递减</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(s[-<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(s[-<span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(s[-<span class="hljs-number">5</span>])<br></code></pre></td></tr></table></figure><blockquote><p>g<br>P<br>a</p></blockquote><p><strong>索引只能获得一个字符，如何获得多个字符？</strong></p><h3 id="2-字符串的切片"><a href="#2-字符串的切片" class="headerlink" title="2 字符串的切片"></a>2 字符串的切片</h3><p><strong>变量名[开始位置:结束位置:切片间隔]</strong></p><ul><li>切片间隔若不设置默认为1，可省略</li><li>切片范围不包含结束位置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;Python&quot;</span><br><span class="hljs-built_in">print</span>(s[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>:<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(s[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>:<span class="hljs-number">2</span>])<br><span class="hljs-built_in">print</span>(s[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure><blockquote><p>Pyt<br>Pt<br>Pyt</p></blockquote><ul><li>起始位置是0，可以省略</li><li>结束位置省略代表可以取到最后一个字符</li><li>可以使用反向索引</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(s[<span class="hljs-number">0</span>:<span class="hljs-number">6</span>])<br><span class="hljs-built_in">print</span>(s[:<span class="hljs-number">6</span>])<br><span class="hljs-built_in">print</span>(s[:])<br><span class="hljs-built_in">print</span>(s[-<span class="hljs-number">6</span>:])<br></code></pre></td></tr></table></figure><blockquote><p>Python<br>Python<br>Python<br>Python</p></blockquote><p><strong>反向切片</strong></p><ul><li>起始位置是-1也可以省略</li><li>结束位置省略，代表可以取到第一个字符</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;123456789&quot;</span><br><span class="hljs-built_in">print</span>(s[-<span class="hljs-number">1</span>:-<span class="hljs-number">10</span>:-<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(s[:-<span class="hljs-number">10</span>:-<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(s[::-<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><blockquote><p>987654321<br>987654321<br>987654321</p></blockquote><h2 id="2-2-3-字符串操作符"><a href="#2-2-3-字符串操作符" class="headerlink" title="2.2.3 字符串操作符"></a>2.2.3 字符串操作符</h2><h3 id="1-字符串拼接"><a href="#1-字符串拼接" class="headerlink" title="1 字符串拼接"></a>1 字符串拼接</h3><ul><li>字符串1+字符串2</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&quot;I love &quot;</span><br>b = <span class="hljs-string">&quot;my wife &quot;</span><br><span class="hljs-built_in">print</span>(a+b)<br></code></pre></td></tr></table></figure><blockquote><p>I love my wife </p></blockquote><h3 id="2-字符串的成倍复制"><a href="#2-字符串的成倍复制" class="headerlink" title="2 字符串的成倍复制"></a>2 字符串的成倍复制</h3><ul><li>字符串*n 或 n*字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">c = a + b<br><span class="hljs-built_in">print</span>(c*<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">5</span>*c)<br></code></pre></td></tr></table></figure><blockquote><p>I love my wife I love my wife I love my wife<br>I love my wife I love my wife I love my wife I love my wife I love my wife </p></blockquote><h3 id="3-成员运算"><a href="#3-成员运算" class="headerlink" title="3 成员运算"></a>3 成员运算</h3><ul><li><strong>子集in全集</strong> 任何一个连续的切片都是原字符串的子集</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">folk_singers = <span class="hljs-string">&quot;Peter, Paul and Mary&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Peter&quot;</span> <span class="hljs-keyword">in</span> folk_singers)<br></code></pre></td></tr></table></figure><blockquote><p>True</p></blockquote><ul><li><strong>遍历字符串字符</strong> for 字符 in 字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;Python&quot;</span>:<br>    <span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><blockquote><p>P<br>y<br>t<br>h<br>o<br>n</p></blockquote><h2 id="2-2-4-字符串处理函数"><a href="#2-2-4-字符串处理函数" class="headerlink" title="2.2.4 字符串处理函数"></a>2.2.4 字符串处理函数</h2><h3 id="1-字符串的长度"><a href="#1-字符串的长度" class="headerlink" title="1 字符串的长度"></a>1 字符串的长度</h3><ul><li>所含字符个数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;Python&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(s))<br></code></pre></td></tr></table></figure><blockquote><p>6</p></blockquote><h3 id="2-字符编码"><a href="#2-字符编码" class="headerlink" title="2 字符编码"></a>2 字符编码</h3><p><strong>将中文字库、英文字母、数字、特殊符号等转化成计算机可识别的二进制数</strong></p><ul><li>每个单一字符对应一个唯一的互不重复的二进制编码</li><li>Python中使用的是Unicode编码</li></ul><p><strong>将字符转化为Unicode码</strong>——ord(字符)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&quot;1&quot;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&quot;a&quot;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&quot;*&quot;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&quot;中&quot;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&quot;国&quot;</span>))<br></code></pre></td></tr></table></figure><blockquote><p>49<br>97<br>42<br>20013<br>22269</p></blockquote><p><strong>将Unicode码转化为字符</strong>——chr(Unicode码)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">1010</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">10000</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">12345</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">23456</span>))<br></code></pre></td></tr></table></figure><blockquote><p>ϲ<br>✐<br>〹<br>宠</p></blockquote><h2 id="2-2-5-字符串的处理方法"><a href="#2-2-5-字符串的处理方法" class="headerlink" title="2.2.5 字符串的处理方法"></a>2.2.5 字符串的处理方法</h2><h3 id="1-字符串的分割——字符串-split-分割字符"><a href="#1-字符串的分割——字符串-split-分割字符" class="headerlink" title="1 字符串的分割——字符串.split(分割字符)"></a>1 字符串的分割——字符串.split(分割字符)</h3><ul><li>返回一个列表</li><li>原字符串不变</li></ul><p><strong>上述特性适合一下所有字符串处理方法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">languages = <span class="hljs-string">&quot;Python C C++ Java PHP R&quot;</span><br>languages_list = languages.split(<span class="hljs-string">&quot; &quot;</span>)<br><span class="hljs-built_in">print</span>(languages_list)<br><span class="hljs-built_in">print</span>(languages)<br></code></pre></td></tr></table></figure><blockquote><p>[‘Python’, ‘C’, ‘C++’, ‘Java’, ‘PHP’, ‘R’]<br>Python C C++ Java PHP R</p></blockquote><h3 id="2-字符串的聚合——“聚合字符”-join-可迭代数据类型"><a href="#2-字符串的聚合——“聚合字符”-join-可迭代数据类型" class="headerlink" title="2 字符串的聚合——“聚合字符”.join(可迭代数据类型)"></a>2 字符串的聚合——“聚合字符”.join(可迭代数据类型)</h3><ul><li>可迭代类型 如：字符串、列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;12345&quot;</span><br>s_join = <span class="hljs-string">&quot;,&quot;</span>.join(s)<br><span class="hljs-built_in">print</span>(s_join)<br></code></pre></td></tr></table></figure><blockquote><p>1,2,3,4,5</p></blockquote><ul><li>序列类型元素必须为字符类型</li></ul><h3 id="3-删除两端特定字符——字符串-strip-删除字符"><a href="#3-删除两端特定字符——字符串-strip-删除字符" class="headerlink" title="3 删除两端特定字符——字符串.strip(删除字符)"></a>3 删除两端特定字符——字符串.strip(删除字符)</h3><ul><li>strip从两侧开始搜索，遇到指定字符执行删除，遇到非指定字符，搜索停止</li><li>类似的还有左删除lstrip和右删除rstrip</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;   I have many blanks   &quot;</span><br><span class="hljs-built_in">print</span>(s.strip(<span class="hljs-string">&quot; &quot;</span>))<br><span class="hljs-built_in">print</span>(s.lstrip(<span class="hljs-string">&quot; &quot;</span>))<br><span class="hljs-built_in">print</span>(s.rstrip(<span class="hljs-string">&quot; &quot;</span>))<br></code></pre></td></tr></table></figure><blockquote><p>I have many blanks<br>I have many blanks<br>　I have many blanks</p></blockquote><h3 id="4-字符串的替换——字符串-replace-“被替换”-”替换成”"><a href="#4-字符串的替换——字符串-replace-“被替换”-”替换成”" class="headerlink" title="4 字符串的替换——字符串.replace(“被替换”,”替换成”)"></a>4 字符串的替换——字符串.replace(“被替换”,”替换成”)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;Python is coming&quot;</span><br>s1 = s.replace(<span class="hljs-string">&quot;Python&quot;</span>, <span class="hljs-string">&quot;Py&quot;</span>)<br><span class="hljs-built_in">print</span>(s1)<br></code></pre></td></tr></table></figure><blockquote><p>Py is coming</p></blockquote><h3 id="5-字符串统计——字符串-count-“待统计字符串”"><a href="#5-字符串统计——字符串-count-“待统计字符串”" class="headerlink" title="5 字符串统计——字符串.count(“待统计字符串”)"></a>5 字符串统计——字符串.count(“待统计字符串”)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;Python is an excellent language&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;an:&quot;</span>, s.count(<span class="hljs-string">&quot;an&quot;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e:&quot;</span>, s.count(<span class="hljs-string">&quot;e&quot;</span>))<br></code></pre></td></tr></table></figure><blockquote><p>an: 2<br>e: 4</p></blockquote><h3 id="6-字符串字母大小写"><a href="#6-字符串字母大小写" class="headerlink" title="6 字符串字母大小写"></a>6 字符串字母大小写</h3><ul><li>字符串.upper()字母全部大写</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;Python&quot;</span><br><span class="hljs-built_in">print</span>(s.upper())<br></code></pre></td></tr></table></figure><blockquote><p>PYTHON</p></blockquote><ul><li>字符串.lower()字母全部小写</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(s.lower())<br></code></pre></td></tr></table></figure><blockquote><p>python</p></blockquote><ul><li>字符串.title()首字母大写</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(s.title())<br></code></pre></td></tr></table></figure><blockquote><p>Python</p></blockquote><h1 id="2-3-布尔类型-True-or-False"><a href="#2-3-布尔类型-True-or-False" class="headerlink" title="2.3 布尔类型 True or False"></a>2.3 布尔类型 True or False</h1><h2 id="2-3-1-逻辑运算的结果"><a href="#2-3-1-逻辑运算的结果" class="headerlink" title="2.3.1 逻辑运算的结果"></a>2.3.1 逻辑运算的结果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(a &gt; <span class="hljs-number">8</span>)<br><span class="hljs-built_in">print</span>(a == <span class="hljs-number">12</span>)<br><span class="hljs-built_in">print</span>(a &lt; <span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><blockquote><p>True<br>False<br>False</p></blockquote><ul><li>any() all()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">any</span>([<span class="hljs-literal">False</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">None</span>]))  <span class="hljs-comment"># 0 False None 都是无</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">all</span>([<span class="hljs-literal">False</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">None</span>]))<br></code></pre></td></tr></table></figure><blockquote><p>True<br>False</p></blockquote><h2 id="2-3-2-指示条件"><a href="#2-3-2-指示条件" class="headerlink" title="2.3.2 指示条件"></a>2.3.2 指示条件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-number">2800</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    m = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入一个正整数：&quot;</span>))<br>    <span class="hljs-keyword">if</span> m == n:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你猜对啦&quot;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">elif</span> m &gt; n:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;太大了&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;太小了&quot;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>请输入一个正整数：28<br>太小了<br>请输入一个正整数：2800<br>你猜对啦</p></blockquote><h2 id="2-3-3-作为掩码"><a href="#2-3-3-作为掩码" class="headerlink" title="2.3.3 作为掩码"></a>2.3.3 作为掩码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>x = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>]])<br><span class="hljs-built_in">print</span>(x &gt; <span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(x[x &gt; <span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure><blockquote><p>[[False False False  True  True]]<br>[5 7]</p></blockquote><h1 id="2-4-类型判别及类型转换"><a href="#2-4-类型判别及类型转换" class="headerlink" title="2.4 类型判别及类型转换"></a>2.4 类型判别及类型转换</h1><h2 id="2-4-1-类型判别"><a href="#2-4-1-类型判别" class="headerlink" title="2.4.1 类型判别"></a>2.4.1 类型判别</h2><ul><li>type(变量)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">age = <span class="hljs-number">20</span><br>name = <span class="hljs-string">&quot;Ada&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(age))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(name))<br></code></pre></td></tr></table></figure><blockquote><p>&lt;class ‘int’&gt;<br>&lt;class ‘str’&gt;</p></blockquote><ul><li>isinstance(变量,预判类型) <strong>承认继承</strong><br>变量类型是预判类型的子类型，则为真，否则为假</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(age, <span class="hljs-built_in">int</span>))  <span class="hljs-comment"># 承认继承</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(age, <span class="hljs-built_in">object</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(name, <span class="hljs-built_in">object</span>))  <span class="hljs-comment"># object是老祖宗</span><br></code></pre></td></tr></table></figure><blockquote><p>True<br>True<br>True</p></blockquote><ul><li>字符串检查方法</li></ul><p><strong>字符串.isdigit()字符是否只有数字组成</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">age = <span class="hljs-string">&quot;20&quot;</span><br>name = <span class="hljs-string">&quot;Ada&quot;</span><br><span class="hljs-built_in">print</span>(age.isdigit())<br><span class="hljs-built_in">print</span>(name.isdigit())<br></code></pre></td></tr></table></figure><blockquote><p>True<br>False</p></blockquote><p><strong>字符串.isalpha()字符是否只有字母组成</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(name.isalpha())<br></code></pre></td></tr></table></figure><blockquote><p>True</p></blockquote><p><strong>字符串.isalnum()字符是否只有数字和字母组成</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Ada20&quot;</span>.isalnum())<br></code></pre></td></tr></table></figure><blockquote><p>True</p></blockquote><h2 id="2-4-2-类型转换"><a href="#2-4-2-类型转换" class="headerlink" title="2.4.2 类型转换"></a>2.4.2 类型转换</h2><ul><li>数字类型转字符串 str(数字类型)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">age = <span class="hljs-number">20</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;My age is &quot;</span>+<span class="hljs-built_in">str</span>(age))<br></code></pre></td></tr></table></figure><blockquote><p>My age is 20</p></blockquote><ul><li>仅有数字组成的字符串转数字 int() float() eval()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = <span class="hljs-string">&quot;20&quot;</span><br>s2 = <span class="hljs-string">&quot;10.1&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(s1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">float</span>(s1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">float</span>(s2))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">eval</span>(s1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">eval</span>(s2))<br></code></pre></td></tr></table></figure><blockquote><p>20<br>20.0<br>10.1<br>20<br>10.1</p></blockquote><p>以上，便是第二节基本数据类型内容。<br>下一节为组合数据类型，深入了解列表、元组、字典和集合。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World!</title>
    <link href="/2022/06/20/hello-world/"/>
    <url>/2022/06/20/hello-world/</url>
    
    <content type="html"><![CDATA[<p><strong>欢迎你来到这个博客！</strong></p><p>我叫<strong>DoubleS</strong>，目前就读于<strong>UESTC</strong>，之前有写文档的习惯，不妨就利用这个假期来搭一个博客作为一次探索的尝试吧！</p><p>相信大多数人建站的初始目的都希望能在网上找到一个发表自己感悟、分享自己生活的平台。一开始我写一些类似于笔记的文档，发表于知乎与CSDN上，在这些平台进行写作是十分方便快捷，只需静心写作，无需关注其他东西，但我更喜欢亲自动手部署的过程，说简单点，就是<strong>爱折腾</strong>。我无法保证我能做到文章的持续输出，仅作为一次尝试，因此我选择了建站成本最低的方式——使用<strong>Hexo框架</strong>，并且使用fluid主题进行了简单美化。</p><p><strong>2022.6.19</strong>，是这个博客诞生的日子。我会陆陆续续完善博客的功能以及发布更多的文章，文章大多是学习的记录与生活中的感悟。当然，不指望知识的传播，而是希望自己的学习生活过程得到记录。我是人工智能专业，以后大多会发布一些人工智能专业的知识点文章以及精彩的大学生活记录。希望你我都能从无论是建站优化还是发文感悟的同时都能收获成长！</p><p align="right">DoubleS2022.6.20</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【Python】1. 基本语法元素</title>
    <link href="/2022/06/19/Python/%E3%80%90Python%E3%80%911.%20%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%85%83%E7%B4%A0/"/>
    <url>/2022/06/19/Python/%E3%80%90Python%E3%80%911.%20%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%85%83%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="一、数据类型"><a href="#一、数据类型" class="headerlink" title="一、数据类型"></a>一、数据类型</h3><h4 id="1-基本类型：数字、字符串、布尔"><a href="#1-基本类型：数字、字符串、布尔" class="headerlink" title="1. 基本类型：数字、字符串、布尔"></a>1. 基本类型：数字、字符串、布尔</h4><p><strong>1.1 数字类型</strong></p><ul><li><p>int 整型 整数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></li><li><p>float 浮点型 带小数的数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">2.5</span><br><span class="hljs-comment">#2.0虽然数值上与2相等，但其为浮点数，与上一代码段中的2的数据类型不一样</span><br></code></pre></td></tr></table></figure></li><li><p>complex 复数 $a+bj$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">3</span>+<span class="hljs-number">4j</span><br></code></pre></td></tr></table></figure></li></ul><p><strong>1.2 字符串类型</strong></p><blockquote><ol><li>str 字符串 视作文本</li><li><strong>组成</strong>：由数字、字母、空格、其他字符组成</li><li><strong>表达</strong>：用’ ‘或” “</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;Python-#Double S&quot;</span><br></code></pre></td></tr></table></figure><p><strong>1.3 布尔类型</strong></p><p>bool 布尔类型</p><p>主要用于逻辑运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">y = <span class="hljs-number">2</span> &gt; <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(y)<br></code></pre></td></tr></table></figure><p><strong>上述数据类型均可定义单个数据，但面对多组数据，需要利用组合类型</strong></p><h4 id="2-组合类型：列表、元组、字典、集合"><a href="#2-组合类型：列表、元组、字典、集合" class="headerlink" title="2. 组合类型：列表、元组、字典、集合"></a>2. 组合类型：列表、元组、字典、集合</h4><p><strong>2.1 列表（有序）</strong></p><p>list 列表 序列类型：数据有位置顺序</p><p>表示方式：[data1,data2…]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>a[<span class="hljs-number">0</span>]<span class="hljs-comment">#读取a列表中第一个元素</span><br>a[-<span class="hljs-number">1</span>]<span class="hljs-comment">#读取a列表中最后一个元素</span><br></code></pre></td></tr></table></figure><p><strong>2.2 元组</strong></p><p>tuple 元组 序列类型</p><p>表示方式：(data1,data2…)</p><p><strong>元素不可修改，即不可变列表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">b = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)<br>b[<span class="hljs-number">0</span>]<span class="hljs-comment">#读取b元组第一个元素</span><br></code></pre></td></tr></table></figure><p><strong>2.3 字典</strong></p><p>dict 字典 映射类型：通过”键”-“值”的映射实现数据的存储和查找</p><p>表示方式：{key1:value1,key2:value2…}</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">student = &#123;0601016:<span class="hljs-string">&quot;小石&quot;</span>, 0601015:<span class="hljs-string">&quot;小刘&quot;</span>, 0601014:<span class="hljs-string">&quot;小卢&quot;</span>&#125;<br>student[0601015]<span class="hljs-comment">#与list和tuple不同，dict通过key读取元素</span><br></code></pre></td></tr></table></figure><p>字典是在内部是无序的</p><p><strong>2.4 集合</strong></p><p>set 集合 一系列互不相等元素的集合，无序的</p><p>表示方式：{data1,data2…}</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">student = &#123;<span class="hljs-string">&quot;小石&quot;</span>,<span class="hljs-string">&quot;小刘&quot;</span>,<span class="hljs-string">&quot;小卢&quot;</span>,<span class="hljs-string">&quot;小刘&quot;</span>&#125;<br><span class="hljs-built_in">print</span>(student)<span class="hljs-comment">#虽然多打了一个小刘，但是set中元素互不相等且无序，故只输出前三者</span><br></code></pre></td></tr></table></figure><p>我们一般通过<strong>变量</strong>来引用这些数据</p><h3 id="二、变量"><a href="#二、变量" class="headerlink" title="二、变量"></a>二、变量</h3><h4 id="1-变量的概念"><a href="#1-变量的概念" class="headerlink" title="1.  变量的概念"></a>1.  变量的概念</h4><p>量：实实在在的对象，如数据、抽象</p><p>变：可变性：增、删、查、改等</p><p><strong>变量定义二要素：变量名，赋值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="2-变量的命名"><a href="#2-变量的命名" class="headerlink" title="2. 变量的命名"></a>2. 变量的命名</h4><p><strong>2.1 哪些可以做变量名？</strong></p><p>大写字母、小写字母、数字、下划线、汉字及其组合</p><p>严格区分大小写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">Double_S_is_a_小白 = Ture<br>double_s_is_a_小白 = <span class="hljs-literal">False</span><br><span class="hljs-comment">#Python严格区分大小写，上述是两个变量</span><br></code></pre></td></tr></table></figure><p><strong>2.2 哪些情况不允许做变量名？</strong></p><p>首字符不允许为数字</p><p>变量名中间不能有空格</p><p>不能与Python中33个保留字相同</p><p><strong>2.3 变量名定义技巧</strong></p><p>尽量有实际意义，表征数据的某种特性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">age_of_students = [<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>]<br><span class="hljs-comment">#比单独字母a = [17,18,19]更加清晰，增强可读性</span><br></code></pre></td></tr></table></figure><p>下划线 （推荐变量和函数名） 变量名由多个单词组成：用_连接多个单词</p><p>驼峰体 （推荐类名）变量名由多个单词组成：单词首字母大写</p><p>尽量避免中文或拼音做变量名</p><p>特殊变量：常量 （不变的量 如：$\pi,e$）变量所有字母均大写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">MAX_ITERATION = <span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><h4 id="3-变量的赋值"><a href="#3-变量的赋值" class="headerlink" title="3. 变量的赋值"></a>3. 变量的赋值</h4><p><strong>3.1 一般赋值</strong></p><p>通过等号自右向左赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">1</span>+<span class="hljs-number">2</span><span class="hljs-comment">#先计算1+2=3,再将结果赋值给x</span><br><span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><p><strong>3.2 增量赋值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">10</span><br>x = x+<span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(x)<br>x += <span class="hljs-number">10</span><span class="hljs-comment">#x=x+10简写，更常用</span><br></code></pre></td></tr></table></figure><p><strong>3.3 打包赋值</strong></p><p>同时对多个变量赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">x, y = <span class="hljs-number">1</span>, <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(x, y)<br>x, y = y, x<span class="hljs-comment">#Python一行代码即可实行互换</span><br><span class="hljs-built_in">print</span>(x, y)<br></code></pre></td></tr></table></figure><h3 id="三、控制流程"><a href="#三、控制流程" class="headerlink" title="三、控制流程"></a>三、控制流程</h3><h4 id="1-顺序流程"><a href="#1-顺序流程" class="headerlink" title="1. 顺序流程"></a>1. 顺序流程</h4><p>自上而下依次执行</p><p>【例】实现1到5的整数求和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#res = 1+2+3+4+5</span><br>res = <span class="hljs-number">0</span>    <span class="hljs-comment">#赋初值</span><br>res += <span class="hljs-number">1</span><br>res += <span class="hljs-number">2</span><br>res += <span class="hljs-number">3</span><br>res += <span class="hljs-number">4</span><br>res += <span class="hljs-number">5</span><br><span class="hljs-built_in">print</span>(res)    <span class="hljs-comment">#显示结果</span><br></code></pre></td></tr></table></figure><h4 id="2-循环流程——遍历循环-for"><a href="#2-循环流程——遍历循环-for" class="headerlink" title="2. 循环流程——遍历循环(for)"></a>2. 循环流程——遍历循环(for)</h4><p>主要形式：</p><p>for 元素 in 可迭代对象:</p><p>​    执行语句</p><p>执行过程：从可迭代对象中，依次取出每一个元素，并进行相应操作</p><p>【例】实现1到5的整数求和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">res = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]:    <span class="hljs-comment">#每次迭代，取出1个i</span><br>    res += i    <span class="hljs-comment">#对每次迭代取出的i 进行相应操作</span><br><span class="hljs-built_in">print</span>(res)    <span class="hljs-comment">#遍历结束后，执行后续语句</span><br></code></pre></td></tr></table></figure><h4 id="3-循环流程——无限循环-while"><a href="#3-循环流程——无限循环-while" class="headerlink" title="3. 循环流程——无限循环(while)"></a>3. 循环流程——无限循环(while)</h4><p>主要形式：</p><p>while 判断条件:</p><p>​    条件为真，执行语句</p><p>条件为假，while循环结束</p><p>【例】实现1到5的整数求和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">i = <span class="hljs-number">1</span><br>res = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i &lt;= <span class="hljs-number">5</span>:    <span class="hljs-comment">#若i不大于5，则循环继续</span><br>    res += i<br>    i += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(res)    <span class="hljs-comment">#若循环条件不成立，循环停止，执行后续语句</span><br></code></pre></td></tr></table></figure><h4 id="4-分支流程-if"><a href="#4-分支流程-if" class="headerlink" title="4.分支流程(if)"></a>4.分支流程(if)</h4><p>最简单形式：</p><p>if 判断条件:</p><p>​    条件为真，执行语句</p><p>else:</p><p>​    条件为假，执行语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">age = <span class="hljs-number">18</span><br><span class="hljs-keyword">if</span> age &gt; <span class="hljs-number">22</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;可以结婚啦&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;再等等吧&quot;</span>)<br></code></pre></td></tr></table></figure><p>下面，我们了解控制流程后，再回过头看看如何输入输出</p><h3 id="四、输入输出"><a href="#四、输入输出" class="headerlink" title="四、输入输出"></a>四、输入输出</h3><h4 id="1-数据从何而来？"><a href="#1-数据从何而来？" class="headerlink" title="1. 数据从何而来？"></a>1. 数据从何而来？</h4><p><strong>1.1 外部文件导入</strong></p><p>从本地硬盘、网络端读入等</p><p>后续会详细讲解</p><p><strong>1.2 程序中定义</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">age = <span class="hljs-number">18</span><br>name = <span class="hljs-string">&quot;Tom&quot;</span><br></code></pre></td></tr></table></figure><p><strong>1.3 动态交互输入 input</strong></p><p>在程序运行过程中进行输入（此时输入数据为字符串形式）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入一个数字:&quot;</span>)<span class="hljs-comment">#此时输入数据为字符串形式</span><br><span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><p>eval()去掉引号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入一个数字:&quot;</span>))<br>y = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入一个数字:&quot;</span>))<br><span class="hljs-built_in">print</span>(x+y)<br></code></pre></td></tr></table></figure><h4 id="2-数据到哪儿去？"><a href="#2-数据到哪儿去？" class="headerlink" title="2. 数据到哪儿去？"></a>2. 数据到哪儿去？</h4><p><strong>2.1 存储到本地硬盘和网络端</strong></p><p>后续详细讲解</p><p><strong>2.2 打印输出print</strong></p><p>直接打印数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我是DoubleS!&quot;</span>)<br></code></pre></td></tr></table></figure><p>打印变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">1024</span><br><span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><p>PS:print默认换行</p><p>若不想换行，换行控制 end&#x3D;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-number">123</span>, end=<span class="hljs-string">&quot; &quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">456</span>)<br></code></pre></td></tr></table></figure><p>有时，我们需要一些复杂输出：比如几个变量一起组合输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">PI = <span class="hljs-number">3.1415926</span><br>E = <span class="hljs-number">2.71828</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;PI = &quot;</span>, PI,<span class="hljs-string">&quot;E = &quot;</span>, E)<br></code></pre></td></tr></table></figure><p><strong>2.3 格式化输出方法 format</strong></p><p>基本格式：”字符{0}字符{1}字符”.format(v0, v1)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">PI = <span class="hljs-number">3.1415926</span><br>E = <span class="hljs-number">2.71828</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;PI = &#123;0&#125;, E = &#123;1&#125;&quot;</span>.<span class="hljs-built_in">format</span>(PI, E))<br><span class="hljs-comment">#&#123;&#125;内数字代表format中对应数据，可自己调整顺序</span><br><span class="hljs-comment">#也可以不填，默认从0开始</span><br></code></pre></td></tr></table></figure><p>填充输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#_____3.1415926_____    进行填充</span><br>PI = <span class="hljs-number">3.1415926</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;0:_^20&#125;&quot;</span>.<span class="hljs-built_in">format</span>(PI))<br><span class="hljs-comment">#^为数据居中，&lt;为数据左对齐，&gt;为数据右对齐</span><br></code></pre></td></tr></table></figure><p>数字千分位分隔符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#显示1,000,000</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;0:,&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1000000</span>))<br><span class="hljs-comment">#若既要填充输出，又要千分位分隔符</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;0:$&gt;20,&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1000000</span>))<br></code></pre></td></tr></table></figure><p>浮点数简化输出</p><ul><li><p>留2位小数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">PI = <span class="hljs-number">3.1415926</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;0:.2f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(PI))<br></code></pre></td></tr></table></figure></li><li><p>按百分数输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;0:.1%&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">0.818727</span>))<br></code></pre></td></tr></table></figure></li><li><p>科学计数法输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;0:.2e&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">0.818727</span>))<br></code></pre></td></tr></table></figure></li></ul><p>整数的进制转换输出</p><ul><li><p>十进制整数转二进制、unicode码、十进制、八进制、十六进制输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;二进制&#123;0:b&#125;, Uicode码&#123;0:c&#125;, 十进制&#123;0:d&#125;, 八进制&#123;0:o&#125;, 十六进制&#123;0:x&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">450</span>))<br></code></pre></td></tr></table></figure></li></ul><blockquote><p>综上，format用法总结：</p><p>“字符{0:修饰}字符{1:修饰}字符”.format(v1,v2)</p><p>严格按照顺序：</p><p>{x:&lt;填充&gt;&lt;对齐&gt;&lt;宽度&gt;&lt;,&gt;&lt;.精度&gt;&lt;类型&gt;}</p></blockquote><h3 id="五、程序格式"><a href="#五、程序格式" class="headerlink" title="五、程序格式"></a>五、程序格式</h3><p>增强可读性，使大量Python代码风格一致</p><h4 id="1-行最大长度"><a href="#1-行最大长度" class="headerlink" title="1. 行最大长度"></a>1. 行最大长度</h4><p>所有行限制的最大字符数为79</p><h4 id="2-缩进"><a href="#2-缩进" class="headerlink" title="2. 缩进"></a>2. 缩进</h4><ul><li>用缩进来表示语句间逻辑</li><li>在 for while if def class等：之后下一行开始进行缩进，表明后续代码与前句之间的从属关系</li><li>缩进量：4字符</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]:<br>    <span class="hljs-built_in">print</span>(i)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;打印结束&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="3-使用空格"><a href="#3-使用空格" class="headerlink" title="3. 使用空格"></a>3. 使用空格</h4><ul><li><p>二元运算符两边加一个空格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">2</span>    <span class="hljs-comment">#赋值</span><br>x + = <span class="hljs-number">4</span>    <span class="hljs-comment">#增量</span><br><span class="hljs-number">6</span> &gt; <span class="hljs-number">2</span>    <span class="hljs-comment">#比较</span><br></code></pre></td></tr></table></figure></li><li><p>使用不同优先级的运算符，考虑在最低级的运算符周围添加空格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x = x*<span class="hljs-number">2</span> - <span class="hljs-number">1</span><br>z = x*x + y*y<br>c = (a+b) * (a-b)<br></code></pre></td></tr></table></figure></li><li><p>在逗号后使用空格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">x, y = <span class="hljs-number">1</span>, <span class="hljs-number">2</span><br>ls = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure></li><li><p>不要使用一个以上空格</p></li></ul><h4 id="4-避免使用空格"><a href="#4-避免使用空格" class="headerlink" title="4. 避免使用空格"></a>4. 避免使用空格</h4><ul><li><p>在制定关键字参数或者默认参数值的时候，不要在&#x3D;附近加上空格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params">n=<span class="hljs-number">1</span>, m=<span class="hljs-number">2</span></span>):<br>    <span class="hljs-built_in">print</span>(n, m)<br></code></pre></td></tr></table></figure></li></ul><h4 id="5-注释"><a href="#5-注释" class="headerlink" title="5. 注释"></a>5. 注释</h4><ul><li>单行注释</li><li>格式： # 注释内容</li><li>多行注释（”””)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">1</span>    <span class="hljs-comment">#我是单行注释</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">我是</span><br><span class="hljs-string">多行</span><br><span class="hljs-string">注释</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p><strong>以上，便是第一节基本语法元素内容</strong></p><p><strong>下一节内容为基本数据类型，将深入了解数字、字符串、布尔</strong></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
